//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package cloudinit

import (
	stringedint "github.com/Mirantis/mcc-api/v2/pkg/apis/util/ipam/k8sutil/stringedint"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BridgeParametrs) DeepCopyInto(out *BridgeParametrs) {
	*out = *in
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.PortPriority != nil {
		in, out := &in.PortPriority, &out.PortPriority
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BridgeParametrs.
func (in *BridgeParametrs) DeepCopy() *BridgeParametrs {
	if in == nil {
		return nil
	}
	out := new(BridgeParametrs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetconfigFile) DeepCopyInto(out *NetconfigFile) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetconfigFile.
func (in *NetconfigFile) DeepCopy() *NetconfigFile {
	if in == nil {
		return nil
	}
	out := new(NetconfigFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in NetconfigFiles) DeepCopyInto(out *NetconfigFiles) {
	{
		in := &in
		*out = make(NetconfigFiles, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetconfigFiles.
func (in NetconfigFiles) DeepCopy() NetconfigFiles {
	if in == nil {
		return nil
	}
	out := new(NetconfigFiles)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSmetadataLink) DeepCopyInto(out *OSmetadataLink) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSmetadataLink.
func (in *OSmetadataLink) DeepCopy() *OSmetadataLink {
	if in == nil {
		return nil
	}
	out := new(OSmetadataLink)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSmetadataNetwork) DeepCopyInto(out *OSmetadataNetwork) {
	*out = *in
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]OSmetadataNetworkRoute, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSmetadataNetwork.
func (in *OSmetadataNetwork) DeepCopy() *OSmetadataNetwork {
	if in == nil {
		return nil
	}
	out := new(OSmetadataNetwork)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSmetadataNetworkConfig) DeepCopyInto(out *OSmetadataNetworkConfig) {
	*out = *in
	if in.Links != nil {
		in, out := &in.Links, &out.Links
		*out = make([]OSmetadataLink, len(*in))
		copy(*out, *in)
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]OSmetadataNetwork, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]OSmetadataService, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSmetadataNetworkConfig.
func (in *OSmetadataNetworkConfig) DeepCopy() *OSmetadataNetworkConfig {
	if in == nil {
		return nil
	}
	out := new(OSmetadataNetworkConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSmetadataNetworkRoute) DeepCopyInto(out *OSmetadataNetworkRoute) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSmetadataNetworkRoute.
func (in *OSmetadataNetworkRoute) DeepCopy() *OSmetadataNetworkRoute {
	if in == nil {
		return nil
	}
	out := new(OSmetadataNetworkRoute)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSmetadataService) DeepCopyInto(out *OSmetadataService) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSmetadataService.
func (in *OSmetadataService) DeepCopy() *OSmetadataService {
	if in == nil {
		return nil
	}
	out := new(OSmetadataService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OVSconfig) DeepCopyInto(out *OVSconfig) {
	*out = *in
	if in.ExternalIDs != nil {
		in, out := &in.ExternalIDs, &out.ExternalIDs
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.OtherConfig != nil {
		in, out := &in.OtherConfig, &out.OtherConfig
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Protocols != nil {
		in, out := &in.Protocols, &out.Protocols
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([][]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Controller != nil {
		in, out := &in.Controller, &out.Controller
		*out = new(OVSconfigController)
		(*in).DeepCopyInto(*out)
	}
	if in.Ssl != nil {
		in, out := &in.Ssl, &out.Ssl
		*out = new(OVSconfigSSL)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OVSconfig.
func (in *OVSconfig) DeepCopy() *OVSconfig {
	if in == nil {
		return nil
	}
	out := new(OVSconfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OVSconfigController) DeepCopyInto(out *OVSconfigController) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OVSconfigController.
func (in *OVSconfigController) DeepCopy() *OVSconfigController {
	if in == nil {
		return nil
	}
	out := new(OVSconfigController)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OVSconfigSSL) DeepCopyInto(out *OVSconfigSSL) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OVSconfigSSL.
func (in *OVSconfigSSL) DeepCopy() *OVSconfigSSL {
	if in == nil {
		return nil
	}
	out := new(OVSconfigSSL)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCBase) DeepCopyInto(out *SCBase) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Nameservers != nil {
		in, out := &in.Nameservers, &out.Nameservers
		*out = new(V2Nameservers)
		(*in).DeepCopyInto(*out)
	}
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]V2Route, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RoutingPolicy != nil {
		in, out := &in.RoutingPolicy, &out.RoutingPolicy
		*out = make([]V2RoutingPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Openvswitch != nil {
		in, out := &in.Openvswitch, &out.Openvswitch
		*out = new(OVSconfig)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCBase.
func (in *SCBase) DeepCopy() *SCBase {
	if in == nil {
		return nil
	}
	out := new(SCBase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCBond) DeepCopyInto(out *SCBond) {
	*out = *in
	in.SCBase.DeepCopyInto(&out.SCBase)
	if in.Interfaces != nil {
		in, out := &in.Interfaces, &out.Interfaces
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*stringedint.WrongStringedInt, len(*in))
		for key, val := range *in {
			var outVal *stringedint.WrongStringedInt
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(stringedint.WrongStringedInt)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCBond.
func (in *SCBond) DeepCopy() *SCBond {
	if in == nil {
		return nil
	}
	out := new(SCBond)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in SCBonds) DeepCopyInto(out *SCBonds) {
	{
		in := &in
		*out = make(SCBonds, len(*in))
		for key, val := range *in {
			var outVal *SCBond
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCBond)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCBonds.
func (in SCBonds) DeepCopy() SCBonds {
	if in == nil {
		return nil
	}
	out := new(SCBonds)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCBridge) DeepCopyInto(out *SCBridge) {
	*out = *in
	in.SCBase.DeepCopyInto(&out.SCBase)
	if in.Interfaces != nil {
		in, out := &in.Interfaces, &out.Interfaces
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = new(BridgeParametrs)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCBridge.
func (in *SCBridge) DeepCopy() *SCBridge {
	if in == nil {
		return nil
	}
	out := new(SCBridge)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in SCBridges) DeepCopyInto(out *SCBridges) {
	{
		in := &in
		*out = make(SCBridges, len(*in))
		for key, val := range *in {
			var outVal *SCBridge
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCBridge)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCBridges.
func (in SCBridges) DeepCopy() SCBridges {
	if in == nil {
		return nil
	}
	out := new(SCBridges)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCEthernet) DeepCopyInto(out *SCEthernet) {
	*out = *in
	in.SCBase.DeepCopyInto(&out.SCBase)
	if in.Match != nil {
		in, out := &in.Match, &out.Match
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.VirtualFunctionCount != nil {
		in, out := &in.VirtualFunctionCount, &out.VirtualFunctionCount
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCEthernet.
func (in *SCEthernet) DeepCopy() *SCEthernet {
	if in == nil {
		return nil
	}
	out := new(SCEthernet)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in SCEthernets) DeepCopyInto(out *SCEthernets) {
	{
		in := &in
		*out = make(SCEthernets, len(*in))
		for key, val := range *in {
			var outVal *SCEthernet
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCEthernet)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCEthernets.
func (in SCEthernets) DeepCopy() SCEthernets {
	if in == nil {
		return nil
	}
	out := new(SCEthernets)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SCVlan) DeepCopyInto(out *SCVlan) {
	*out = *in
	in.SCBase.DeepCopyInto(&out.SCBase)
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCVlan.
func (in *SCVlan) DeepCopy() *SCVlan {
	if in == nil {
		return nil
	}
	out := new(SCVlan)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in SCVlans) DeepCopyInto(out *SCVlans) {
	{
		in := &in
		*out = make(SCVlans, len(*in))
		for key, val := range *in {
			var outVal *SCVlan
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCVlan)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SCVlans.
func (in SCVlans) DeepCopy() SCVlans {
	if in == nil {
		return nil
	}
	out := new(SCVlans)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StoredNetplan) DeepCopyInto(out *StoredNetplan) {
	*out = *in
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(UserDataNetworkV2)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StoredNetplan.
func (in *StoredNetplan) DeepCopy() *StoredNetplan {
	if in == nil {
		return nil
	}
	out := new(StoredNetplan)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserDataNetworkV2) DeepCopyInto(out *UserDataNetworkV2) {
	*out = *in
	if in.Ethernets != nil {
		in, out := &in.Ethernets, &out.Ethernets
		*out = make(SCEthernets, len(*in))
		for key, val := range *in {
			var outVal *SCEthernet
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCEthernet)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Bridges != nil {
		in, out := &in.Bridges, &out.Bridges
		*out = make(SCBridges, len(*in))
		for key, val := range *in {
			var outVal *SCBridge
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCBridge)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Bonds != nil {
		in, out := &in.Bonds, &out.Bonds
		*out = make(SCBonds, len(*in))
		for key, val := range *in {
			var outVal *SCBond
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCBond)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Vlans != nil {
		in, out := &in.Vlans, &out.Vlans
		*out = make(SCVlans, len(*in))
		for key, val := range *in {
			var outVal *SCVlan
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(SCVlan)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserDataNetworkV2.
func (in *UserDataNetworkV2) DeepCopy() *UserDataNetworkV2 {
	if in == nil {
		return nil
	}
	out := new(UserDataNetworkV2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *V2Nameservers) DeepCopyInto(out *V2Nameservers) {
	*out = *in
	if in.Search != nil {
		in, out := &in.Search, &out.Search
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new V2Nameservers.
func (in *V2Nameservers) DeepCopy() *V2Nameservers {
	if in == nil {
		return nil
	}
	out := new(V2Nameservers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *V2Route) DeepCopyInto(out *V2Route) {
	*out = *in
	if in.Metric != nil {
		in, out := &in.Metric, &out.Metric
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.Table != nil {
		in, out := &in.Table, &out.Table
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.CongestionWindow != nil {
		in, out := &in.CongestionWindow, &out.CongestionWindow
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.AdvertisedReceiveWindow != nil {
		in, out := &in.AdvertisedReceiveWindow, &out.AdvertisedReceiveWindow
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new V2Route.
func (in *V2Route) DeepCopy() *V2Route {
	if in == nil {
		return nil
	}
	out := new(V2Route)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *V2RoutingPolicy) DeepCopyInto(out *V2RoutingPolicy) {
	*out = *in
	if in.Table != nil {
		in, out := &in.Table, &out.Table
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.Mark != nil {
		in, out := &in.Mark, &out.Mark
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	if in.ToS != nil {
		in, out := &in.ToS, &out.ToS
		*out = new(stringedint.WrongStringedInt)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new V2RoutingPolicy.
func (in *V2RoutingPolicy) DeepCopy() *V2RoutingPolicy {
	if in == nil {
		return nil
	}
	out := new(V2RoutingPolicy)
	in.DeepCopyInto(out)
	return out
}
