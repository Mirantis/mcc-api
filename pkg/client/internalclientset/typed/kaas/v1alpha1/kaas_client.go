/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Mirantis/mcc-api/pkg/apis/public/kaas/v1alpha1"
	"github.com/Mirantis/mcc-api/pkg/client/internalclientset/scheme"
	rest "k8s.io/client-go/rest"
)

type KaasV1alpha1Interface interface {
	RESTClient() rest.Interface
	AWSCredentialsGetter
	AWSResourcesesGetter
	AzureCredentialsGetter
	AzureResourcesesGetter
	BYOCredentialsGetter
	CertificatesGetter
	CertificateConfigurationsGetter
	ClusterReleasesGetter
	EquinixMetalCredentialsGetter
	EquinixMetalResourcesesGetter
	KaaSCephClustersGetter
	KaaSCephOperationRequestsGetter
	KaaSReleasesGetter
	LicensesGetter
	MCCCertificateRequestsGetter
	MCCUpgradesGetter
	MachinePoolsGetter
	OpenStackCredentialsGetter
	OpenStackResourcesesGetter
	ProxiesGetter
	PublicKeysGetter
	RHELLicensesGetter
	UnsupportedClustersesGetter
	VsphereCredentialsGetter
	VsphereResourcesesGetter
}

// KaasV1alpha1Client is used to interact with features provided by the kaas.mirantis.com group.
type KaasV1alpha1Client struct {
	restClient rest.Interface
}

func (c *KaasV1alpha1Client) AWSCredentials(namespace string) AWSCredentialInterface {
	return newAWSCredentials(c, namespace)
}

func (c *KaasV1alpha1Client) AWSResourceses(namespace string) AWSResourcesInterface {
	return newAWSResourceses(c, namespace)
}

func (c *KaasV1alpha1Client) AzureCredentials(namespace string) AzureCredentialInterface {
	return newAzureCredentials(c, namespace)
}

func (c *KaasV1alpha1Client) AzureResourceses(namespace string) AzureResourcesInterface {
	return newAzureResourceses(c, namespace)
}

func (c *KaasV1alpha1Client) BYOCredentials(namespace string) BYOCredentialInterface {
	return newBYOCredentials(c, namespace)
}

func (c *KaasV1alpha1Client) Certificates(namespace string) CertificateInterface {
	return newCertificates(c, namespace)
}

func (c *KaasV1alpha1Client) CertificateConfigurations(namespace string) CertificateConfigurationInterface {
	return newCertificateConfigurations(c, namespace)
}

func (c *KaasV1alpha1Client) ClusterReleases() ClusterReleaseInterface {
	return newClusterReleases(c)
}

func (c *KaasV1alpha1Client) EquinixMetalCredentials(namespace string) EquinixMetalCredentialInterface {
	return newEquinixMetalCredentials(c, namespace)
}

func (c *KaasV1alpha1Client) EquinixMetalResourceses(namespace string) EquinixMetalResourcesInterface {
	return newEquinixMetalResourceses(c, namespace)
}

func (c *KaasV1alpha1Client) KaaSCephClusters(namespace string) KaaSCephClusterInterface {
	return newKaaSCephClusters(c, namespace)
}

func (c *KaasV1alpha1Client) KaaSCephOperationRequests(namespace string) KaaSCephOperationRequestInterface {
	return newKaaSCephOperationRequests(c, namespace)
}

func (c *KaasV1alpha1Client) KaaSReleases() KaaSReleaseInterface {
	return newKaaSReleases(c)
}

func (c *KaasV1alpha1Client) Licenses() LicenseInterface {
	return newLicenses(c)
}

func (c *KaasV1alpha1Client) MCCCertificateRequests(namespace string) MCCCertificateRequestInterface {
	return newMCCCertificateRequests(c, namespace)
}

func (c *KaasV1alpha1Client) MCCUpgrades() MCCUpgradeInterface {
	return newMCCUpgrades(c)
}

func (c *KaasV1alpha1Client) MachinePools(namespace string) MachinePoolInterface {
	return newMachinePools(c, namespace)
}

func (c *KaasV1alpha1Client) OpenStackCredentials(namespace string) OpenStackCredentialInterface {
	return newOpenStackCredentials(c, namespace)
}

func (c *KaasV1alpha1Client) OpenStackResourceses(namespace string) OpenStackResourcesInterface {
	return newOpenStackResourceses(c, namespace)
}

func (c *KaasV1alpha1Client) Proxies(namespace string) ProxyInterface {
	return newProxies(c, namespace)
}

func (c *KaasV1alpha1Client) PublicKeys(namespace string) PublicKeyInterface {
	return newPublicKeys(c, namespace)
}

func (c *KaasV1alpha1Client) RHELLicenses(namespace string) RHELLicenseInterface {
	return newRHELLicenses(c, namespace)
}

func (c *KaasV1alpha1Client) UnsupportedClusterses() UnsupportedClustersInterface {
	return newUnsupportedClusterses(c)
}

func (c *KaasV1alpha1Client) VsphereCredentials(namespace string) VsphereCredentialInterface {
	return newVsphereCredentials(c, namespace)
}

func (c *KaasV1alpha1Client) VsphereResourceses(namespace string) VsphereResourcesInterface {
	return newVsphereResourceses(c, namespace)
}

// NewForConfig creates a new KaasV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*KaasV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &KaasV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new KaasV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *KaasV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new KaasV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *KaasV1alpha1Client {
	return &KaasV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *KaasV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
